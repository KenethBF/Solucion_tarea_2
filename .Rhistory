class(v)
v
n <-c(1,2,3,-1,-2,-3)
n
class(n)
m <-c(1L,2L,3L,4L)
m
is.integer(m)
b <-c(1:6)
b
l <- list(v,n,m)
l
str(l)
ja <-matrix(c(1:25), nrow = 5)
ja
x <- matrix(letters)
x
matrix2 <- matrix(c(letters), nrow= 13, ncol=2)
matrix2
m <- data.frame(ID = letters[1:5], size = rnorm(5), observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))
m
str(m)
m <- data.frame(v, size = rnorm(5), observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))
m <- data.frame(v, size = 1:5, observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))
m
str(m)
df <- data.frame(family = c("Psittacidae", "Trochilidae",
"Psittacidae"),
genus = c("Amazona", "Phaethornis", "Ara"),
species = c("aestiva", "philippii", "ararauna"))
df[c(1,2), ]
df[c(1,2)]
df[1]
df
df[c(1,3)]
df
df[, c(1,3)]
l[letters]
l <- list(v,n,m)
l
str(l)
l
i[v]
l[v]
df[1:2, ]
df[c(1,2)]
df[1:2, ]
df[1:3,]
df[1:3,]
df[1:2, ]
l[[v]]
l[["v"]]
install.packages(dagitty)
install.packages("dagitty")
install.packages("ggda")
install.packages("ggdag")
install.packages("wesanderson")
library("wesanderson"")
library("wesanderson")
library(wesanderson)
install.packages("Rtools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
C:\\rtools40\\usr\\bin\\make.exe"
Sys.which("make")
C:\\rtools40\\usr\\bin\\make.exe
C://rtools40//usr//bin//make.exe
Sys.which("make")
C://rtools40//usr//bin//make.exe
install.packages("jsonlite", type = "source")
install.packages(c("dagitty", "ggdag", "wesanderson")
install.packages(c("dagitty", "ggdag", "wesanderson")
install.packages("dagitty")
install.packages("ggdag")
install.packages("wesanderson")
require(dagitty)
require(ggdag)
require(wsanderson)
require(wesanderson)
require(wesanderson)
require(dagitty)
require(ggdag)
require(wesanderson)
# crear DAG
dag <- dagitty("dag{y -> z <- x}")
# compactar
tidy_dagitty(dag)
# crear DAG
dagified <- dagify(z ~ x,
z ~ y,
exposure = "x",
outcome = "y")
# compactar
tidy_dagitty(dagified)
# crear DAG
dagified <- dagify(z ~ x,
z ~ y,
exposure = "x",
outcome = "y")
# compactar
tidy_dagitty(dagified)
# graficar el primero
ggdag(dag, layout = "circle") + theme_dag()
# graficar y el segundo
ggdag(dagified, layout = "circle") + theme_dag()
# graficar el primero
ggdag(dag, layout = "circle") + theme_dag()
# graficar y el segundo
ggdag(dagified, layout = "circle") + theme_dag()
# graficar
ggplot(nd_tdag, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges() +
geom_dag_collider_edges() +
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "relaciones-d",
na.value = "grey85"
)
#compactar dag
tdag <- tidy_dagitty(dagified)
# estimar relaciones-d
nd_tdag <- node_dconnected(tdag, "x", "y", controlling_for = "z")
# graficar
ggplot(nd_tdag, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges() +
geom_dag_collider_edges() +
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "relaciones-d",
na.value = "grey85"
)
# simular datos
x <- rnorm(n = 100, mean = 0, sd = 1) # Que tan confiable es un articulo
y <- rnorm(n = 100, mean = 0, sd = 1) # Que tan llamativo es un articulo
dat <- data.frame(x = x,  y = y)
# bucle para asignar indice 1 o 2
for (i in 1:100) {
if (dat$x[i] + dat$y[i] > 1.5) {
dat$z[i] <- 1
}
else {
dat$z[i] <- 2
}
}
ggplot(data = dat, aes (x = x, y = y, colour = as.factor(z))) +
geom_point(size = 3, alpha = 0.7) +
scale_color_manual(values = wes_palette("IsleofDogs1")[c(1,3)],
labels = c("Si", "No"))+
theme_minimal(base_size = 16) +
labs (x = "Confiable", y = "Llamativo", colour = "Publicado") +
geom_smooth(data = dat[which(dat$z == 1),], method = "lm", se = F, formula ='y~x')
m1 <- lm(y ~ x, data = dat)
summary(m1)
m2 <- lm(y ~ x + z, data = dat)
summary(m2)
m3 <- lm(y ~ x * z, data = dat)
summary(m3)
m2 <- lm(y ~ x + z, data = dat)
summary(m2)
m3 <- lm(y ~ x * z, data = dat)
summary(m3)
escamas <- dagify(x ~ V,
E ~ V,
E ~ x,
A ~ E,
y ~ E,
A ~ y,
exposure = "x",
outcome = "y")
tidy_dagitty(escamas)
ggdag(escamas, layout = "circle") + theme_dag()
# enumerar covariables
adjustmentSets(x = escamas, exposure = "x", outcome = "y", type="all", effect = "total")
# grafico
ggplot(d_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
# d relativos
d_node <- node_dseparated(td_dag, "x", "y", controlling_for = "V")
# grafico
ggplot(d_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
escamas <- dagify(x ~ V,
E ~ V,
E ~ x,
A ~ E,
y ~ E,
A ~ y,
exposure = "x",
outcome = "y")
tidy_dagitty(escamas)
ggdag(escamas, layout = "circle") + theme_dag()
# enumerar covariables
adjustmentSets(x = escamas, exposure = "x", outcome = "y", type="all", effect = "total")
# compactar
td_dag <- tidy_dagitty(escamas)
# d relativos
d_node <- node_dseparated(td_dag, "x", "y", controlling_for = "V")
# grafico
ggplot(d_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
impliedConditionalIndependencies(x = escamas, type = "missing.edge")
impliedConditionalIndependencies(x = escamas, type = "basis.set")
V <- rnorm(n = 100, mean = 0, sd = 1)
x.err <- rnorm(n = 100, mean = 0, sd = 0.5)
x <- 0 + 0.75*V + x.err # x depende de V
E.err <- rnorm(n = 100, mean = 0, sd = 0.5)
E <- 0 + 0.5*V + 0.5*x + E.err # E depende de V y de x
A.err <- rnorm(n = 100, mean = 0, sd = 0.5)
A <- 0 + 0.5*E + A.err # A depende de E
y.err <- rnorm(n = 100, mean = 0, sd = 0.5)
y <- 0 + 0.75*E + y.err # y depende de E
# modelo linear
m1 <- lm(y ~ x + V)
# resultados
summary(m1)
# modelo linear
m2 <- lm(y ~ x)
# resultados
m1$coefficients[2];m2$coefficients[2]
# modelo linear
m1 <- lm(y ~ x + V)
# resultados
summary(m1)
# modelo linear
m2 <- lm(y ~ x)
# resultados
m1$coefficients[2];m2$coefficients[2]
sessionInfo
sessionInfo()
install.packages("packrat")
################################### Load Packages/Pedigree ##########################
library(MCMCglmm)
library(MuMIn)
library(rptR)
library(pscl)
library(lme4)
library(bbmle)
library(coefplot)
library(coda)
################################### Load Packages/Pedigree ##########################
library(MCMCglmm)
library(MuMIn)
library(rptR)
library(pscl)
library(lme4)
library(bbmle)
library(coefplot)
library(coda)
################################### Load Packages/Pedigree ##########################
library(MCMCglmm)
################################### Load Packages/Pedigree ##########################
library(MCMCglmm)
library(MuMIn)
library(rptR)
library(pscl)
library(lme4)
library(bbmle)
library(coefplot)
library(coda)
Ped.1=read.csv("Pedigree.A_Long.csv",header=TRUE)
setwd("~/UCR/Biolo/Reproducibles/Tarea_2/curso_reproducible")
source('~/UCR/Biolo/Reproducibles/Tarea_2/curso_reproducible/scripts/replicar_reg_scal.R')
View(replicar_reg_scal)
View(replicar_reg_scal)
View(replicar_reg_scal)
View(replicar_reg_scal)
View(replicar_reg_scal)
source("./scripts/replicar_reg_scal.R")
source("./scripts/replicar_reg_scal.R")
source("./scripts/replicar_reg_scal.R")
replicar_reg_scal <- function(itr = 100, nvars = 50, n = 30, alfa = 0.05){
valores_p <- replicate(n = itr, expr = {
datos <- replicate(n = nvars, expr = rnorm(n = n, mean = 0, sd = 1))
resp_indc <- sample(ncol(datos), 1)
resp <- datos[, resp_indc]
datos <- datos[, -resp_indc]
pca <- prcomp(datos, scale. = TRUE)
pca_summ <- summary(pca)$importance
max_pcs <- which.max(pca_summ[3, ] > 0.7)
datos_pca <- as.data.frame(pca$x[, 1 : max_pcs])
mod_nulo <- lm(resp ~ 1, data = datos_pca)
mod_global <- lm(resp ~ ., data = datos_pca)
mod_final <- step(mod_nulo, direction = 'both', scope = formula(mod_global), trace = FALSE)
sm <- summary(mod_global)
sm$coefficients[-1 , 4]
})
replicar_reg_scal <- function(itr = 100, nvars = 50, n = 30, alfa = 0.05){
valores_p <- replicate(n = itr, expr = {
datos <- replicate(n = nvars, expr = rnorm(n = n, mean = 0, sd = 1))
resp_indc <- sample(ncol(datos), 1)
resp <- datos[, resp_indc]
datos <- datos[, -resp_indc]
pca <- prcomp(datos, scale. = TRUE)
pca_summ <- summary(pca)$importance
max_pcs <- which.max(pca_summ[3, ] > 0.7)
datos_pca <- as.data.frame(pca$x[, 1 : max_pcs])
mod_nulo <- lm(resp ~ 1, data = datos_pca)
mod_global <- lm(resp ~ ., data = datos_pca)
mod_final <- step(mod_nulo, direction = 'both', scope = formula(mod_global), trace = FALSE)
sm <- summary(mod_global)
sm$coefficients[-1 , 4]
})
replicar_reg_scal <- function(itr = 100, nvars = 50, n = 30, alfa = 0.05){
# replicar itr veces
valores_p <- replicate(n = itr, expr = {
# crear n variables al azar desde una distribuciÃ³n normal
datos <- replicate(n = nvars, expr = rnorm(n = n, mean = 0, sd = 1))
# escoger al azar una variable como respuesta
resp_indc <- sample(ncol(datos), 1)
resp <- datos[, resp_indc]
# remover respuesta de datos
datos <- datos[, -resp_indc]
# usar componentes principales para lidear con colinearidad y mantener las 10
pca <- prcomp(datos, scale. = TRUE)
# extraer la contribucion de los PC's
pca_summ <- summary(pca)$importance
# determinar cuantos PC's se deben usar para incluir al menos 70% de la variacion el los datos
max_pcs <- which.max(pca_summ[3, ] > 0.7)
# extraer PC's escogidos y convertir a data.frame y
datos_pca <- as.data.frame(pca$x[, 1 : max_pcs])
# definir un modelo nulo (sin predictor)
mod_nulo <- lm(resp ~ 1, data = datos_pca)
# definir modelo global
mod_global <- lm(resp ~ ., data = datos_pca)
# correr regression escalonada
mod_final <- step(mod_nulo, direction = 'both', scope = formula(mod_global), trace = FALSE)
# extraer coeficientes
sm <- summary(mod_global)
# extraer y devolver valores de p excluyendo el del intercepto
sm$coefficients[-1 , 4]
})
replicar_reg_scal <- function(itr = 100, nvars = 50, n = 30, alfa = 0.05){
# replicar itr veces
valores_p <- replicate(n = itr, expr = {
# crear n variables al azar desde una distribuciÃ³n normal
datos <- replicate(n = nvars, expr = rnorm(n = n, mean = 0, sd = 1))
# escoger al azar una variable como respuesta
resp_indc <- sample(ncol(datos), 1)
resp <- datos[, resp_indc]
# remover respuesta de datos
datos <- datos[, -resp_indc]
# usar componentes principales para lidear con colinearidad y mantener las 10
pca <- prcomp(datos, scale. = TRUE)
# extraer la contribucion de los PC's
pca_summ <- summary(pca)$importance
# determinar cuantos PC's se deben usar para incluir al menos 70% de la variacion el los datos
max_pcs <- which.max(pca_summ[3, ] > 0.7)
# extraer PC's escogidos y convertir a data.frame y
datos_pca <- as.data.frame(pca$x[, 1 : max_pcs])
# definir un modelo nulo (sin predictor)
mod_nulo <- lm(resp ~ 1, data = datos_pca)
# definir modelo global
mod_global <- lm(resp ~ ., data = datos_pca)
# correr regression escalonada
mod_final <- step(mod_nulo, direction = 'both', scope = formula(mod_global), trace = FALSE)
# extraer coeficientes
sm <- summary(mod_global)
# extraer y devolver valores de p excluyendo el del intercepto
sm$coefficients[-1 , 4]
})
# calcular cuantas variables produjeron un valor de p menor a alfa para cada iteracion
signf <- sapply(valores_p, function(x) sum(x < alfa))
# calcular el numero de iteraciones con al menos una variable significativa
sig_itr <- sum(signf > 0) / itr
return(sig_itr)
}
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
source("./scripts/replicar_reg_scal.R")
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
source("./scripts/replicar_reg_scal.R")
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 20, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 50, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 100, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 20, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 50, alfa = 0.05)
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 100, alfa = 0.05)
falsos_positivos1 <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
falsos_positivos2 <- replicar_reg_scal(itr = 20, n = 30, nvars = 20, alfa = 0.05)
falsos_positivos3 <- replicar_reg_scal(itr = 20, n = 30, nvars = 50, alfa = 0.05)
falsos_positivos4 <- replicar_reg_scal(itr = 20, n = 30, nvars = 100, alfa = 0.05)
source("./scripts/replicar_reg_scal.R")
falsos_positivos1 <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
falsos_positivos2 <- replicar_reg_scal(itr = 20, n = 30, nvars = 20, alfa = 0.05)
falsos_positivos3 <- replicar_reg_scal(itr = 20, n = 30, nvars = 50, alfa = 0.05)
falsos_positivos4 <- replicar_reg_scal(itr = 20, n = 30, nvars = 100, alfa = 0.05)
View(replicar_reg_scal)
plot(falsos_positivos1~falsos_positivos2~falsos_positivos3~falsos_positivos4)
boxplot(falsos_positivos1 ~ falsos_positivos2, col = "#EE000010", ylab = "Longitud de sépalo (mm)", xlab = "Especies")
boxplot(falsos_positivos1 ~ falsos_positivos2, col = "#EE000010", ylab = "Longitud de sépalo (mm)", xlab = "Especies")
boxplot(falsos_positivos1 ~ falsos_positivos2, col = "#EE000010", ylab = "Longitud de sépalo (mm)", xlab = "Especies")
boxplot(falsos_positivos1 ~ falsos_positivos2 ~ falsos_positivos3 ~ falsos_positivos4, col = "#EE000010", ylab = "Longitud de sépalo (mm)", xlab = "Especies")
falsos_positivos <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, 20, 50, 100, alfa = 0.05)
plot(falsos_positivos1 ~ 10)
View(replicar_reg_scal)
falsos_positivos1
source("./scripts/replicar_reg_scal.R")
falsos_positivos1 <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
falsos_positivos2 <- replicar_reg_scal(itr = 20, n = 30, nvars = 20, alfa = 0.05)
falsos_positivos3 <- replicar_reg_scal(itr = 20, n = 30, nvars = 50, alfa = 0.05)
falsos_positivos4 <- replicar_reg_scal(itr = 20, n = 30, nvars = 100, alfa = 0.05)
falsos_positivos1
falsos_positivos1 <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05)
falsos_positivos2 <- replicar_reg_scal(itr = 20, n = 30, nvars = 20, alfa = 0.05)
falsos_positivos3 <- replicar_reg_scal(itr = 20, n = 30, nvars = 50, alfa = 0.05)
falsos_positivos4 <- replicar_reg_scal(itr = 20, n = 30, nvars = 100, alfa = 0.05)
falsos_positivos1
falsos_positivos2
falsos_positivos3
falsos_positivos4
View(replicar_reg_scal)
sessionInfo()
source("./scripts/replicar_reg_scal.R") # Indica dirección de documento en formato R que contiene función
falsos_positivos1 <- replicar_reg_scal(itr = 20, n = 30, nvars = 10, alfa = 0.05) # Función para determinar falsos positivos para 10 variables
falsos_positivos2 <- replicar_reg_scal(itr = 20, n = 30, nvars = 20, alfa = 0.05) # Función para determinar falsos positivos para 20 variables
falsos_positivos3 <- replicar_reg_scal(itr = 20, n = 30, nvars = 50, alfa = 0.05) # Función para determinar falsos positivos para 50 variables
falsos_positivos4 <- replicar_reg_scal(itr = 20, n = 30, nvars = 100, alfa = 0.05) # Función para determinar falsos positivos para 100 variables
falsos_positivos1 # Proporción de falsos positivos para 10 variables
falsos_positivos2 # Proporción de falsos positivos para 20 variables
falsos_positivos3 # Proporción de falsos positivos para 50 variables
falsos_positivos4 # Proporción de falsos positivos para 100 variables
sessionInfo() # Información de la sesión
x<- c(falsos_positivos1,falsos_positivos2,falsos_positivos3,falsos_positivos4)
```{r}
x<- c(falsos_positivos1,falsos_positivos2,falsos_positivos3,falsos_positivos4)
x<- c(falsos_positivos1,falsos_positivos2,falsos_positivos3,falsos_positivos4)
plot(x~10,20,50,100)
falsos<- c(falsos_positivos1,falsos_positivos2,falsos_positivos3,falsos_positivos4)
plot(falsos)
plot(falsos~ c(10, 20, 50, 100))
plot(c(10, 20, 50, 100 ~ falsos)
plot(c(10, 20, 50, 100 ~ falsos)
plot(c(10, 20, 50, 100) ~ falsos)
plot(c(10, 20, 50, 100) ~ falsos, ylab = "Número de variables", ylab = "Número de variables", xlab = "Proporción de falsos positivos")
plot(c(10, 20, 50, 100) ~ falsos, ylab = "Número de variables", xlab = "Proporción de falsos positivos")
plot(c(10, 20, 50, 100) ~ falsos, ylab = "Número de variables", xlab = "Proporción de falsos positivos", fig.align = center)
install.packages("Rconnect")
library(Rconnect)
options(rpubs.upload.method = “internal”)
